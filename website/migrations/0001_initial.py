# Generated by Django 5.2.6 on 2025-09-03 20:14

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PossessionCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='SocialIndicatorCalculation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_score', models.DecimalField(decimal_places=4, max_digits=10)),
                ('calculation_date', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='PossessionType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('point_value', models.DecimalField(decimal_places=4, max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.possessioncategory')),
            ],
        ),
        migrations.CreateModel(
            name='CitizenPossession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('acquisition_date', models.DateField()),
                ('estimated_value', models.DecimalField(decimal_places=2, max_digits=12)),
                ('status', models.CharField(choices=[('active', 'Active'), ('under_investigation', 'Under Investigation'), ('disputed', 'Disputed'), ('removed', 'Removed')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('possession_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.possessiontype')),
            ],
        ),
        migrations.CreateModel(
            name='CalculationItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('possession_name', models.CharField(max_length=200)),
                ('point_value', models.DecimalField(decimal_places=4, max_digits=10)),
                ('possession', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.citizenpossession')),
                ('calculation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='website.socialindicatorcalculation')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('citizen', 'Citizen'), ('data_entry_staff', 'Data Entry Staff'), ('investigator', 'Investigator'), ('supervisor', 'Supervisor'), ('admin', 'Admin')], default='citizen', max_length=20)),
                ('national_id', models.CharField(max_length=20, unique=True)),
                ('phone_number', models.CharField(max_length=17, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be in format: '+212xxxxxxxxx'", regex='^\\+212[0-9]{9}$')])),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('address', models.TextField(blank=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_code', models.CharField(blank=True, max_length=6)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='website_user_groups', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='website_user_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='socialindicatorcalculation',
            name='calculated_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calculations_made', to='website.user'),
        ),
        migrations.AddField(
            model_name='socialindicatorcalculation',
            name='citizen',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.user'),
        ),
        migrations.CreateModel(
            name='Reclamation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reason', models.TextField()),
                ('evidence_description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('under_investigation', 'Under Investigation'), ('approved', 'Approved - Possession Removed'), ('rejected', 'Rejected - Fine Applied'), ('closed', 'Closed')], default='pending', max_length=20)),
                ('investigation_notes', models.TextField(blank=True)),
                ('resolution_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('possession', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.citizenpossession')),
                ('assigned_investigator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='investigations', to='website.user')),
                ('citizen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.user')),
            ],
        ),
        migrations.CreateModel(
            name='Fine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('reason', models.TextField()),
                ('is_paid', models.BooleanField(default=False)),
                ('payment_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reclamation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='website.reclamation')),
                ('applied_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.user')),
            ],
        ),
        migrations.CreateModel(
            name='CitizenProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('family_size', models.IntegerField(default=1)),
                ('monthly_income', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('has_other_insurance', models.BooleanField(default=False)),
                ('other_insurance_details', models.TextField(blank=True)),
                ('current_social_indicator', models.DecimalField(decimal_places=4, default=0, max_digits=10)),
                ('last_calculated', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='website.user')),
            ],
        ),
        migrations.AddField(
            model_name='citizenpossession',
            name='added_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='added_possessions', to='website.user'),
        ),
        migrations.AddField(
            model_name='citizenpossession',
            name='citizen',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.user'),
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('user_login', 'User Login'), ('possession_added', 'Possession Added'), ('possession_updated', 'Possession Updated'), ('reclamation_created', 'Reclamation Created'), ('reclamation_investigated', 'Reclamation Investigated'), ('fine_applied', 'Fine Applied'), ('application_submitted', 'Application Submitted'), ('application_reviewed', 'Application Reviewed'), ('calculation_performed', 'Social Indicator Calculated')], max_length=30)),
                ('description', models.TextField()),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('metadata', models.JSONField(default=dict)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('related_citizen', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='audit_logs_about', to='website.user')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.user')),
            ],
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('program_type', models.CharField(choices=[('amo', 'AMO Health Insurance'), ('social_aid', 'Social Aid')], max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='draft', max_length=20)),
                ('social_indicator_at_submission', models.DecimalField(decimal_places=4, max_digits=10)),
                ('threshold_at_submission', models.DecimalField(decimal_places=4, max_digits=10)),
                ('review_notes', models.TextField(blank=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('citizen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.user')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_applications', to='website.user')),
            ],
        ),
        migrations.CreateModel(
            name='SocialIndicatorThreshold',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('program_type', models.CharField(choices=[('amo', 'AMO Health Insurance'), ('social_aid', 'Social Aid')], max_length=20)),
                ('max_score', models.DecimalField(decimal_places=4, max_digits=10)),
                ('effective_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.user')),
            ],
            options={
                'unique_together': {('program_type', 'effective_date')},
            },
        ),
    ]
